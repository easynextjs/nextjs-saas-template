/*
 * ==========================================
 * |          GENERATED BY SUPAZOD          |
 * ==========================================
 */

import { z } from "zod";
import { Json } from "./types_db";

export const publicProductStatusSchema = z.union([
  z.literal("in_ready"),
  z.literal("sale"),
  z.literal("soldout"),
  z.literal("stop"),
]);

export const publicUserRoleSchema = z.union([
  z.literal("owner"),
  z.literal("guest"),
]);

export const jsonSchema: z.ZodSchema<Json> = z.lazy(() =>
  z
    .union([
      z.string(),
      z.number(),
      z.boolean(),
      z.record(z.union([jsonSchema, z.undefined()])),
      z.array(jsonSchema),
    ])
    .nullable()
);

export const publicProductRowSchemaSchema = z.object({
  createdAt: z.string(),
  createdUserId: z.number(),
  id: z.number(),
  imageUrl: z.string().nullable(),
  name: z.string(),
  price: z.number(),
  status: publicProductStatusSchema,
  updatedAt: z.string(),
  workspaceId: z.number(),
});

export const publicProductInsertSchemaSchema = z.object({
  createdAt: z.string().optional(),
  createdUserId: z.number(),
  id: z.number().optional(),
  imageUrl: z.string().optional().nullable(),
  name: z.string(),
  price: z.number(),
  status: publicProductStatusSchema.optional(),
  updatedAt: z.string().optional(),
  workspaceId: z.number(),
});

export const publicProductUpdateSchemaSchema = z.object({
  createdAt: z.string().optional(),
  createdUserId: z.number().optional(),
  id: z.number().optional(),
  imageUrl: z.string().optional().nullable(),
  name: z.string().optional(),
  price: z.number().optional(),
  status: publicProductStatusSchema.optional(),
  updatedAt: z.string().optional(),
  workspaceId: z.number().optional(),
});

export const publicProductRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("product_createdUserId_fkey"),
    columns: z.tuple([z.literal("createdUserId")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("user"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("product_workspaceId_fkey"),
    columns: z.tuple([z.literal("workspaceId")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("workspace"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicUserRowSchemaSchema = z.object({
  createdAt: z.string(),
  email: z.string(),
  id: z.number(),
  lastLoginAt: z.string().nullable(),
  name: z.string(),
  passwordHash: z.string(),
  passwordSalt: z.string(),
  updatedAt: z.string(),
});

export const publicUserInsertSchemaSchema = z.object({
  createdAt: z.string().optional(),
  email: z.string(),
  id: z.number().optional(),
  lastLoginAt: z.string().optional().nullable(),
  name: z.string(),
  passwordHash: z.string(),
  passwordSalt: z.string(),
  updatedAt: z.string().optional(),
});

export const publicUserUpdateSchemaSchema = z.object({
  createdAt: z.string().optional(),
  email: z.string().optional(),
  id: z.number().optional(),
  lastLoginAt: z.string().optional().nullable(),
  name: z.string().optional(),
  passwordHash: z.string().optional(),
  passwordSalt: z.string().optional(),
  updatedAt: z.string().optional(),
});

export const publicUserRelationshipsSchemaSchema = z.tuple([]);

export const publicWorkspaceRowSchemaSchema = z.object({
  createdAt: z.string(),
  id: z.number(),
  name: z.string(),
  updatedAt: z.string(),
  userId: z.number(),
});

export const publicWorkspaceInsertSchemaSchema = z.object({
  createdAt: z.string().optional(),
  id: z.number().optional(),
  name: z.string(),
  updatedAt: z.string().optional(),
  userId: z.number(),
});

export const publicWorkspaceUpdateSchemaSchema = z.object({
  createdAt: z.string().optional(),
  id: z.number().optional(),
  name: z.string().optional(),
  updatedAt: z.string().optional(),
  userId: z.number().optional(),
});

export const publicWorkspaceRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("workspace_userId_fkey"),
    columns: z.tuple([z.literal("userId")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("user"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicWorkspaceUserRowSchemaSchema = z.object({
  createdAt: z.string(),
  id: z.number(),
  role: publicUserRoleSchema,
  updatedAt: z.string(),
  userId: z.number(),
  workspaceId: z.number(),
});

export const publicWorkspaceUserInsertSchemaSchema = z.object({
  createdAt: z.string().optional(),
  id: z.number().optional(),
  role: publicUserRoleSchema,
  updatedAt: z.string().optional(),
  userId: z.number(),
  workspaceId: z.number(),
});

export const publicWorkspaceUserUpdateSchemaSchema = z.object({
  createdAt: z.string().optional(),
  id: z.number().optional(),
  role: publicUserRoleSchema.optional(),
  updatedAt: z.string().optional(),
  userId: z.number().optional(),
  workspaceId: z.number().optional(),
});

export const publicWorkspaceUserRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("workspace_user_userId_fkey"),
    columns: z.tuple([z.literal("userId")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("user"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("workspace_user_workspaceId_fkey"),
    columns: z.tuple([z.literal("workspaceId")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("workspace"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);
